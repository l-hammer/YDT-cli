#!/usr/bin/env node

const exists= require('fs').existsSync // node自带的fs模块下的existsSync方法，检测文件是否存在
const path = require('path') // node自带的路径模块
const inquirer = require('inquirer') // 交互式命令行
const program = require('commander') // 命令行处理
const chalk = require('chalk') // 终端打印信息美化
const home = require('user-home') // 用于获取用户的根目录
const download = require('download-git-repo') // 下载远程仓库
const ora = require('ora') // loading效果
const rm = require('rimraf').sync // 相当于UNIX的“rm -rf”命令
const tildify = require('tildify') // 将绝对路径转换成带波浪符的路径
const logger = require('../lib/logger')
// const ini = require('ini')
const generate = require('../lib/generate')
const localPath = require('../lib/localpath')

/**
 * Usage. 配置commander使用方法
 */
program
  .usage('<template-name> [project-name]')
  .option('--offline', 'use cached template')

/**
 * Help. 自定义--help指令信息
 */
program.on('--help', () => {
  console.log('\n  Examples:\n')
  console.log(chalk.gray('    # create a new project with an YDTemplate'))
  console.log('    $ ydt init YDTemplate my-project')
})
function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

let template = program.args[0] // 模板
const hasSlash = template.indexOf('/') > -1 // 判断是否为官方模板
const rawName = program.args[1] // 项目名称
const inPlace = !rawName || rawName === '.' // 是否设置项目名称 true -> 未设置 false-> 已设置
const name = inPlace ? path.relative('../', process.cwd()) : rawName // 最终的项目名称，如果未设置项目名称则采用当前文件夹名称
const to = path.resolve(rawName || '.')
const tmp = path.join(home, '.YDTemplates', template.replace(/[/:]/g, '-'))

if (program.offline) {
  logger.info(`Use cached template at ${chalk.magenta(tildify(tmp))}`)
  template = tmp
}

/**
 * 未设置rawName时，是否在当前目录generate项目；否则rawName已经存在，是否继续
 */
if (inPlace || exists(to)) {
  inquirer.prompt([{
    type: 'comfirm',
    name: 'ok',
    message: inPlace
      ? 'Generate project in current directory?'
      : 'Target directory exists. Continue?',
    default: 'ok'
  }]).then(answers => {
    if (answers.ok) {
      run()
    }
  }).catch(logger.error)
} else {
  run()
}

/**
 * Check是否为本地路径，如果是则直接从缓存目录下读取模板，否则download
 */
function run () {
  if (localPath.isLocalPath(template)) {
    const templatePath = localPath.getTemplatePath(template)
    if (exists(template)) {
      generate(name, templatePath, to, err => {
        if (err) logger.error(err)
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.error('Local template "%s" not found.', template)
    }
  } else {
    if (!hasSlash) {
      // 使用“官方”(官方有点大，只是想区分一下别人而已，不要误会)模板
      const officialTemplate = 'l-hammer/' + template

      downloadAndGenerate(officialTemplate)
    } else {
      downloadAndGenerate(template)
    }
  }
}

/**
 * download and generate the project.
 */
function downloadAndGenerate (template) {
  const spinner = ora('downloading template……')
  console.log()
  spinner.start()
  if (exists(tmp)) rm(tmp)
  download(template, tmp, false, err => {
    if (err) logger.error('Failed to download repo ' + template + ': ' + err)
    spinner.succeed(chalk.green('download successful~'))
    generate(name, tmp, to, err => {
      if (err) logger.error(err)
      logger.success('Generated "%s".', name)
    })
  })
}